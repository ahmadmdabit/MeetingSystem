# docker-compose.yml
# Version specifies the file format. 3.8 is a modern, stable version.
version: '3.8'

# ------------------------------------------------------------------
# Services: Defines the containers that make up the application.
# ------------------------------------------------------------------
services:
  # ------------------------------------------------------------------
  # MeetingSystem API Service
  # ------------------------------------------------------------------
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: meetingsystem-api
    restart: unless-stopped
    ports:
      # Expose port 8080 on the host, mapping to port 8080 inside the container.
      - "8080:8080"
    depends_on:
      # Ensures the API only starts after its dependencies are healthy.
      mssql:
        condition: service_healthy
      minio:
        condition: service_healthy
      mailpit:
        condition: service_healthy
    environment:
      # Explicitly disable Globalization Invariant Mode.
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      # Environment variables are injected from the .env file.
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      # Connection strings use the *service name* (e.g., 'mssql') as the host,
      # which is resolved by Docker's internal DNS.
      - ConnectionStrings__DefaultConnection=Server=${DK_SQL_SERVER};Database=${DK_SQL_DATABASE};User Id=${DK_SQL_USER_ID};Password=${DK_SQL_PASSWORD};TrustServerCertificate=True;
      - Jwt__Key=${DK_JWT_KEY}
      - Jwt__Issuer=${DK_JWT_ISSUER}
      - Jwt__Audience=${DK_JWT_AUDIENCE}
      - Jwt__ExpiresIn=${DK_JWT_EXPIRESIN}
      - Minio__Endpoint=${DK_MINIO_ENDPOINT}
      - Minio__AccessKey=${DK_MINIO_ROOT_USER}
      - Minio__SecretKey=${DK_MINIO_ROOT_PASSWORD}
      - Minio__BucketName=${DK_MINIO_BUCKET_NAME}
      - Minio__PublicEndpoint=${DK_MINIO_PUBLIC_ENDPOINT} # Public endpoint for generating URLs
      - Minio__SSL=${DK_MINIO_SSL}
      - Smtp__Host=${DK_SMTP_HOST}
      - Smtp__Port=${DK_SMTP_PORT}
      - Smtp__Username=${DK_SMTP_USERNAME}
      - Smtp__Password=${DK_SMTP_PASSWORD}
      - Smtp__FromAddress=${DK_SMTP_FROM_ADDRESS}
      - Smtp__FromName=${DK_SMTP_FROM_NAME}
      - Smtp__SSL=${DK_SMTP_SSL}
      
    healthcheck:
      # Periodically checks if the API is responsive.
      # NOTE: This requires a /health endpoint to be added to the API.
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ------------------------------------------------------------------
  # MSSQL Database Service
  # ------------------------------------------------------------------
  mssql:
    image: mcr.microsoft.com/mssql/server:2017-latest
    container_name: meetingsystem-mssql
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DK_SQL_PASSWORD}
    ports:
      # Expose the standard SQL Server port to the host for external tools.
      - "1433:1433"
    volumes:
      - mssql-data:/var/opt/mssql
    healthcheck:
      # Checks if the SQL Server is ready to accept connections.
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "${DK_SQL_PASSWORD}", "-Q", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  # ------------------------------------------------------------------
  # MinIO Object Storage Service
  # ------------------------------------------------------------------
  minio:
    image: minio/minio:latest
    container_name: meetingsystem-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${DK_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${DK_MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000" # API endpoint
      - "9001:9001" # Web console
    volumes:
      - minio-data:/data
    healthcheck:
      # Checks the health of the MinIO service.
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ------------------------------------------------------------------
  # MailPit Service (SMTP Server & Email Viewer)
  # ------------------------------------------------------------------
  mailpit:
    image: axllent/mailpit:latest
    container_name: meetingsystem-mailpit
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    healthcheck:
      # Mailpit has a built-in health check endpoint via its API
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

# ------------------------------------------------------------------
# Named Volumes: Defines persistent storage for stateful services.
# ------------------------------------------------------------------
volumes:
  mssql-data:
  minio-data: